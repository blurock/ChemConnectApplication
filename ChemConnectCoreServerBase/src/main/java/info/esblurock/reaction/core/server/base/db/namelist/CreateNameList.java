package info.esblurock.reaction.core.server.base.db.namelist;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import info.esblurock.reaction.chemconnect.core.base.DatabaseObject;
import info.esblurock.reaction.chemconnect.core.base.dataset.ChemConnectCompoundDataStructure;
import info.esblurock.reaction.chemconnect.core.base.transfer.DataElementInformation;
import info.esblurock.reaction.chemconnect.core.base.utilities.HierarchyNode;
import info.esblurock.reaction.core.ontology.base.dataset.DatasetOntologyParseBase;
import info.esblurock.reaction.core.server.base.queries.QueryBase;

/**
 * Create name lists
 * 
 * This is for the case where a choice of objects must be made given a list of
 * labels. The most common case of this is choosing a name and then relate that
 * name to something in the database. The fundamental problem is that the number
 * of objects can become unmanageable. For this reason, the natural choice is
 * the generation of a hierarchy.
 * 
 * This class provides several ways to create lists of entire classes of
 * persisted objects. The difficulty becomes when the number of objects becomes
 * large.
 * 
 * This is the class which provides static methods to create name lists:
 * <ul>
 * <li>createnNameHierarchy: This creates a hierarchy of HierarchyNode classes
 * where the label is the print version and identifier is the identifier used to
 * access the object.
 * <li>createCompletionList: This actually creates just a name list, with the
 * main use for completion. Unfortunately, here there is no ability to relate it
 * back to the original source.
 * </ul>
 *
 * 
 * The key to creating these name lists is the DatabaseObjectComparator class. This class provides the necessary interfacing. For a given persistent object, a class is created which extends this class and provides the necessary implementations:
 * <ul>
 * <li> classType: This is the class type (ontological object). It is used to get the objects from the database.
 * <li>compare(DatabaseObject o1, DatabaseObject o2): This is the method for sorting (Comparator<DatabaseObject>)
 * <li>String generateLabel(DatabaseObject obj): This is the label visible when accessing. This will be used to make sub-levels in the hierarchy.
 * </ul>
 * 
 * @author edwardblurock
 *
 */
public class CreateNameList {
	public static int standardElementsInNode = 30;
	public static int limitForCompletionSet = 3000;

	/**
	 * @param comp The comparator interface for the particular object
	 * @return The hierarchy
	 * @throws IOException System error, usually if the class is not known
	 * 
	 * This uses the default number of elements in the node (standardElementsInNode)
	 * 
	 */
	public static HierarchyNode createnNameHierarchy(DatabaseObjectComparator comp) throws IOException {
		return createnNameHierarchy(comp, standardElementsInNode);
	}

	/**
	 * @param comp The comparator interface for the particular object
	 * @param topNumberInNode number of elements allowed in a node
	 * @return The hierarchy
	 * @throws IOException System error, usually if the class is not known
	 */
	public static HierarchyNode createnNameHierarchy(DatabaseObjectComparator comp, int topNumberInNode)
			throws IOException {
		List<DatabaseObject> objs = getListOfSortedObjects(comp);
		HierarchyNode topnode = new HierarchyNode(
				ChemConnectCompoundDataStructure.removeNamespace(comp.getClassType()));
		if (objs.size() < topNumberInNode) {
			allInOneNode(topnode, objs, comp);
		}
		return topnode;
	}

	/** Puts all the objects in one node 
	 * 
	 * @param topnode The node
	 * @param objs The set of objects
	 * @param comp The comparator for the object  (used for the label)
	 * @return the node with all the subnodes for the elements
	 */
	private static HierarchyNode allInOneNode(HierarchyNode topnode, List<DatabaseObject> objs,
			DatabaseObjectComparator comp) {
		for (DatabaseObject obj : objs) {
			HierarchyNode subnode = new HierarchyNode(obj.getIdentifier(), comp.generateLabel(obj));
			topnode.addSubNode(subnode);
		}
		return topnode;
	}

	/**
	 * @param comp The comparator for the object
	 * @return The list of labels (generated by DatabaseObjectComparator)
	 * @throws IOException usually a system error, such as can't find class
	 */
	public static List<String> createCompletionList(DatabaseObjectComparator comp) throws IOException {
		List<DatabaseObject> objs = getListOfSortedObjects(comp);
		ArrayList<String> lst = new ArrayList<String>();
		for (DatabaseObject obj : objs) {
			lst.add(comp.generateLabel(obj));
		}
		return lst;
	}

	/** Read in all the objects from the database
	 * 
	 * This is the method used by all in this class to get the elements.
	 * 
	 * @param comp The comparator (used to find classType)
	 * @return The set of objects from the database
	 * @throws IOException usually a system error
	 */
	private static List<DatabaseObject> getListOfSortedObjects(DatabaseObjectComparator comp) throws IOException {
		DataElementInformation element = DatasetOntologyParseBase
				.getSubElementStructureFromIDObject(comp.getClassType());
		List<DatabaseObject> objs = QueryBase.getDatabaseObjects(element.getChemconnectStructure());
		objs.sort(comp);
		return objs;
	}
}
